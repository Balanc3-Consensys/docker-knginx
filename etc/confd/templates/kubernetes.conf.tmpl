worker_processes auto;
worker_rlimit_nofile 10240;

error_log  /var/log/nginx/error.log info;

events {
    worker_connections  2048;
    use epoll;
    multi_accept on;
}

env SAML_IDP_URL;
env SESSION_SECRET;
env PROFILE_LOCATION;
env LOGOUT_LOCATION;
env ERROR_PAGE_404;

http {
    #include	  /etc/nginx/naxsi/*;
    include       mime.types;
    default_type  text/html;


    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile       on;
    tcp_nopush     on;
    tcp_nodelay    off;
    send_timeout   30;

    aio threads;

    keepalive_timeout  65;
    keepalive_requests 200;
    reset_timedout_connection on;

    server_tokens off;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    gzip on;
    gzip_min_length 256;
    gzip_disable "msie6";
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        application/x-javascript
        text/xml
        application/xml
        application/xml+rss
        image/x-icon
        text/javascript;

    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid    30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;

    proxy_redirect          off;
    proxy_set_header        Host            $host;
    proxy_set_header        X-Real-IP       $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    client_max_body_size    10m;
    client_body_buffer_size 128k;
    proxy_connect_timeout   90;
    proxy_send_timeout      90;
    proxy_read_timeout      300;
    proxy_buffers           32 4k;
    underscores_in_headers  on;

    #websockets
    map $http_upgrade $connection_upgrade {
    	default upgrade;
    	'' close;
    }

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    ssi on;
    #compresson causes SSI problems, disable it
    proxy_set_header Accept-Encoding "";

    #SSL
    ssl_dhparam /etc/ssl/dhparams.pem;
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA";
    ssl_session_cache   shared:SSL:100m;
    ssl_session_timeout 480m;
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    #add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    ssl_session_tickets off;
    ssl_stapling on;
    #ssl_stapling_verify on;

    proxy_set_header X-Tracer $remote_addr-$connection-$connection_requests;
    proxy_set_header X-B3-TraceId $remote_addr-$connection-$connection_requests;

# Annotation Env: {{getenv "ANNOTATION"}} default: {{(or (getenv "ANNOTATION") "nginx")}}

# virtual servers

{{range $serviceJson := getvs "/registry/services/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{$defaultPort := index $service.spec.ports 0}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .http}}
    {{range .http}}
      {{if ne .server "default"}}
      {{$port := or .port $defaultPort.port}}
    #{{$service.metadata.name}} {{$annotation}}
    server {
        listen 80;
        listen 443 ssl;
        server_name {{.server}};

      {{range .locations}}

      location {{.}} {
        proxy_pass http://{{$service.spec.clusterIP}}:{{$port}};
      }

      {{end}}
    }

      {{end}}
    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
{{end}}

# default server

{{$IDP_URL := getenv "SAML_IDP_URL"}}
{{if $IDP_URL}}
    #redirect to https
    server {
      listen 80 default_server;
      return 301 https://$host$request_uri;
    }
    
    #https only
    server {
        listen 443 default_server deferred ssl;

        #Enable SAML
        include saml.conf;

        #PROFILE_LOCATION must point to something like this
        #location /profile {
        #  proxy_pass http://192.168.1.160:3001;
        #}

        #LOGOUT_LOCATION must point to something like this
	#location /logout {
        #  proxy_pass http://192.168.1.160:3001;
        #}
        
{{else}}
    server {
        listen 80 default_server;
        listen 443 default_server deferred ssl;
{{end}}

{{$ERROR_PAGE_404 := getenv "ERROR_PAGE_404"}}
# ERROR_PAGE_404 = {{$ERROR_PAGE_404}}
{{if $ERROR_PAGE_404}}
        error_page 404 /custom_404.html;
        location = /custom_404.html {
        	return 302 {{$ERROR_PAGE_404}};
                internal;
        }
{{end}}

        #Load Balancer Status
        location /lb-status {
          access_log off;
          return 200;
        }
        location /lbstatus {
          access_log off;
          return 200;
        }

	#naxsi
	location /RequestDenied {
          return 418;
	}


{{range $serviceJson := getvs "/registry/services/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{$defaultPort := index $service.spec.ports 0}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .http}}
    {{range .http}}
      {{if eq .server "default"}}
      {{$port := or .port $defaultPort.port}}
      {{range .locations}}

      #{{$service.metadata.name}}
      location {{.}} {
        #include /etc/nginx/naxsi.rules;
        proxy_pass http://{{$service.spec.clusterIP}}:{{$port}};
      }

      {{end}}
      {{end}}
    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
{{end}}

    }
}

stream{

{{range $serviceJson := getvs "/registry/services/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .stream}}
    {{range .stream}}

    #{{$service.metadata.name}}
    server {
        listen {{.listen}};
        proxy_pass {{$service.spec.clusterIP}}:{{or .port .listen}};
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
    }

    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
{{end}}

}
