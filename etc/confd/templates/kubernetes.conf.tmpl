worker_processes auto;
worker_rlimit_nofile 10240;

error_log  /var/log/nginx/error.log;

events {
    worker_connections  2048;
    use epoll;
    multi_accept on;
}

env SAML_IDP_URL;
env SESSION_SECRET;

http {
    include       mime.types;
    default_type  text/html;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile       on;
    tcp_nopush     on;
    tcp_nodelay    off;
    send_timeout   30;

    aio threads;

    keepalive_timeout  65;
    keepalive_requests 200;
    reset_timedout_connection on;

    server_tokens off;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    gzip on;
    gzip_min_length 256;
    gzip_disable "msie6";
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_types
        text/plain
        text/css
        application/json
        application/x-javascript
        text/xml
        application/xml
        application/xml+rss
        image/x-icon
        text/javascript;

    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid    30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;

    proxy_redirect          off;
    proxy_set_header        Host            $host;
    proxy_set_header        X-Real-IP       $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    client_max_body_size    10m;
    client_body_buffer_size 128k;
    proxy_connect_timeout   90;
    proxy_send_timeout      90;
    proxy_read_timeout      90;
    proxy_buffers           32 4k;

    #websockets
    map $http_upgrade $connection_upgrade {
    	default upgrade;
    	'' close;
    }

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    ssi on;
    #compresson causes SSI problems, disable it
    proxy_set_header Accept-Encoding "";

#Annotation Env: {{getenv "ANNOTATION"}} default: {{(or (getenv "ANNOTATION") "nginx")}}
{{range $serviceJson := getvs "/registry/services/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{$defaultPort := index $service.spec.ports 0}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .http}}
    {{range .http}}
      {{if ne .server "default"}}
      {{$port := or .port $defaultPort.port}}
    #{{$service.metadata.name}} {{$annotation}}
    server {
        listen 80;
        server_name {{.server}};
        #SSL
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

      {{range .locations}}

      location {{.}} {
        proxy_pass http://{{$service.spec.clusterIP}}:{{$port}};
      }

      {{end}}
    }

      {{end}}
    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
{{end}}

    server {
        listen 80 default_server;
        #SSL
        listen 443 default_server ssl;
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

{{$IDP_URL := getenv "SAML_IDP_URL"}}
{{if $IDP_URL}}
        #Enable SAML
        include saml.conf;
{{end}}

{{range $serviceJson := getvs "/registry/services/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{$defaultPort := index $service.spec.ports 0}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .http}}
    {{range .http}}
      {{if eq .server "default"}}
      {{$port := or .port $defaultPort.port}}
      {{range .locations}}

      #{{$service.metadata.name}}
      location {{.}} {
        proxy_pass http://{{$service.spec.clusterIP}}:{{$port}};
      }

      {{end}}
      {{end}}
    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
{{end}}

    }
}

stream{

{{range $serviceJson := getvs "/registry/services/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .stream}}
    {{range .stream}}

    #{{$service.metadata.name}}
    server {
        listen {{.listen}};
        proxy_pass {{$service.spec.clusterIP}}:{{or .port .listen}};
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
    }

    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
{{end}}

}
