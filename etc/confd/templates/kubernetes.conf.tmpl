worker_processes auto;
worker_rlimit_nofile 10240;

error_log  /var/log/nginx/error.log info;

events {
    worker_connections  2048;
    use epoll;
    multi_accept on;
}

env SAML_IDP_URL;
env SESSION_SECRET;
env PROFILE_LOCATION;
env LOGOUT_LOCATION;
env ERROR_PAGE_404;
env ERROR_PAGE_500;
env ERROR_PAGE_503;
env HTTPS_ONLY;
env PAGESPEED;
env LETSENCRYPT_DOMAINS;
env NO_SSI;

http {
    include       mime.types;
    default_type  text/html;


    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '[$upstream_response_time / $request_time secs] $upstream_addr $upstream_status $request_id';

    access_log  /var/log/nginx/access.log  main;

    sendfile       on;
    tcp_nopush     on;
    tcp_nodelay    off;
    send_timeout   30;

    aio threads;

    keepalive_timeout  65;
    keepalive_requests 200;
    reset_timedout_connection on;

    server_tokens off;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    gzip on;
    gzip_min_length 256;
    gzip_disable "msie6";
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        application/x-javascript
        text/xml
        application/xml
        application/xml+rss
        image/x-icon
        text/javascript;

    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid    30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;

    proxy_redirect          off;
    proxy_set_header        Host            $host;
    proxy_set_header        X-Real-IP       $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Request-ID $request_id;
    add_header              X-Request-ID $request_id;

    client_max_body_size    20m;
    client_body_buffer_size 128k;
    proxy_connect_timeout   90;
    proxy_send_timeout      90;
    proxy_read_timeout      300;
    proxy_buffers           32 4k;
    underscores_in_headers  on;

    #websockets
    map $http_upgrade $connection_upgrade {
    	default upgrade;
    	'' close;
    }

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_cache_bypass $http_upgrade;

    {{if not (getenv "NO_SSI") }}
    ssi on;
    #compresson causes SSI problems, disable it
    proxy_set_header Accept-Encoding "";
    {{end}}

    #SSL
    ssl_dhparam /etc/ssl/dhparams.pem;
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA";
    ssl_session_cache   shared:SSL:100m;
    ssl_session_timeout 480m;
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    #add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    ssl_session_tickets off;
    ssl_stapling on;
    #ssl_stapling_verify on;


    {{$LETSENCRYPT_DOMAINS := getenv "LETSENCRYPT_DOMAINS"}}
    {{if $LETSENCRYPT_DOMAINS}}
    #letsencrypt
    # The "auto_ssl" shared dict must be defined with enough storage space to
    # hold your certificate data.
    lua_shared_dict auto_ssl 1m;

    # A DNS resolver must be defined for OSCP stapling to function.
    resolver 8.8.8.8;

    # Internal server running on port 8999 for handling certificate tasks.
    server {
      listen 127.0.0.1:8999;
      location / {
        content_by_lua_block {
          auto_ssl:hook_server()
        }
      }
    }
    {{end}}

    #Prometheus
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/usr/local/openresty/luajit/share/lua/5.1/nginx/?.lua;;";

    init_by_lua '
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_latency = prometheus:histogram( 
        "nginx_http_request_duration_seconds", 
        "HTTP Request Latency", 
        {"host", "uri", "status"},
        {0.3, 0.5, 1, 3}
      )
      {{if $LETSENCRYPT_DOMAINS}}
      -- letsencrypt
      auto_ssl = (require "resty.auto-ssl").new()

      -- Define a function to determine which SNI domains to automatically handle
      -- and register new certificates for. Defaults to not allowing any domains,
      -- so this must be configured.
      auto_ssl:set("allow_domain", function(domain)
        return ngx.re.match(domain, "^({{$LETSENCRYPT_DOMAINS}})$", "ijo")
      end)

      auto_ssl:init()
      {{end}}
    ';

    {{if $LETSENCRYPT_DOMAINS}}
    init_worker_by_lua_block {
      auto_ssl:init_worker()
    }
    {{end}}

    #log prometheus metrics
    log_by_lua '
      local m, err = ngx.re.match(ngx.var.uri, "^/[^/]+/[^/]*")
      if m then
        metric_latency:observe(ngx.now() - ngx.req.start_time(), {ngx.var.host, m[0], ngx.var.status})
      else
        metric_latency:observe(ngx.now() - ngx.req.start_time(), {ngx.var.host, ngx.var.uri, ngx.var.status})
      end
    ';

    #called by prometheus
    server {
      listen 9102;
      location /metrics {
        access_log off;
        content_by_lua 'prometheus:collect()';
      }
    }

# Annotation Env: {{getenv "ANNOTATION"}} default: {{(or (getenv "ANNOTATION") "nginx")}}

# Upstreams

{{range $serviceJson := getvs "/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{$endpointPath := printf "/endpoints/default/%s" $service.metadata.name}}
  {{$endpoint := json (getv $endpointPath)}}
  {{if $endpoint.subsets}}
    {{if (index $endpoint.subsets 0).addresses}}
    {{range $port := $service.spec.ports}}
  upstream {{$service.metadata.name}}_{{$port.port}} {
    least_conn;
    keepalive 10;

      {{range $subset := $endpoint.subsets}}
        {{range $subset.addresses}}
    server {{.ip}}:{{$port.targetPort}} weight=1;
        {{end}}
      {{end}}
  }
    {{end}}
    {{end}}
  {{end}}
{{end}}

# virtual servers

{{range $serviceJson := getvs "/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{$endpointPath := printf "/endpoints/default/%s" $service.metadata.name}}
  {{$endpoint := json (getv $endpointPath)}}
  {{if $endpoint.subsets}}
  {{if (index $endpoint.subsets 0).addresses}}
  {{$defaultPort := index $service.spec.ports 0}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .http}}
    {{range .http}}
      {{if ne .server "default"}}
      {{$port := or .port $defaultPort.port}}
    #{{$service.metadata.name}} {{$annotation}}
    server {
        listen 80;
        listen 443 ssl;
        server_name {{.server}};

      {{range .locations}}
      location {{.}} {
        proxy_pass http://{{$service.metadata.name}}_{{$port}};
      }
      {{end}}

      {{range .paths}}
      location {{.path}} {
        {{range .directives}}
        {{.}}
        {{end}}
        {{if not .no_proxy}}
        proxy_pass http://{{$service.metadata.name}}_{{$port}};
        {{end}}
      }
      {{end}}

{{if $LETSENCRYPT_DOMAINS}}
    # Endpoint used for performing domain verification with Let's Encrypt.
    location /.well-known/acme-challenge/ {
      access_by_lua_block { return }
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
      {{if (getenv "PAGESPEED") }}
      pagespeed off;
      {{end}}
    }

    # Dynamic handler for issuing or returning certs for SNI domains.
    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }
{{end}}

    }

      {{end}}
    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
  {{end}}
  {{end}}
{{end}}

# admin server
server {
  listen 90;
  location / {
    proxy_pass http://127.0.0.1:80;
  }
}

# default server

{{if or (getenv "SAML_IDP_URL") (getenv "HTTPS_ONLY")}}
    #redirect to https
    server {
      listen 80 default_server;

{{if $LETSENCRYPT_DOMAINS}}
    # Endpoint used for performing domain verification with Let's Encrypt.
    location /.well-known/acme-challenge/ {
      access_by_lua_block { return }
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
      {{if (getenv "PAGESPEED") }}
      pagespeed off;
      {{end}}
    }

    # Dynamic handler for issuing or returning certs for SNI domains.
    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }
{{end}}

        #Load Balancer Status
        location /lb-status {
          access_log off;
          return 200;
        }
        location /lbstatus {
          access_log off;
          return 200;
        }

      location / {
        return 301 https://$host$request_uri;
      }
    }

    #https only
    server {
        listen 443 default_server http2 deferred ssl;

        #Enable SAML
        include saml.conf;

        #PROFILE_LOCATION must point to something like this
        #location /profile {
        #  proxy_pass http://192.168.1.160:3001;
        #}

        #LOGOUT_LOCATION must point to something like this
        #location /logout {
        #  proxy_pass http://192.168.1.160:3001;
        #}

{{else}}
    server {
        listen 80 default_server;
        listen 443 default_server http2 deferred ssl;
{{end}}

{{if $LETSENCRYPT_DOMAINS}}
    # Endpoint used for performing domain verification with Let's Encrypt.
    location /.well-known/acme-challenge/ {
      access_by_lua_block { return }
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
      {{if (getenv "PAGESPEED") }}
      pagespeed off;
      {{end}}
    }

    # Dynamic handler for issuing or returning certs for SNI domains.
    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }
{{end}}

{{if or (or (getenv "ERROR_PAGE_404") (getenv "ERROR_PAGE_500")) (getenv "ERROR_PAGE_503")}}
        set $original_request_uri $request_uri;
        set $original_request_id $request_id;
        proxy_intercept_errors on;
{{end}}

{{$ERROR_PAGE_404 := getenv "ERROR_PAGE_404"}}
# ERROR_PAGE_404 = {{$ERROR_PAGE_404}}
{{if $ERROR_PAGE_404}}
        error_page 404 /error_page_404;
        location = /error_page_404 {
          proxy_set_header X-Orignal-Request-Uri $original_request_uri;
          proxy_set_header X-Orignal-Request-ID $original_request_id;
          proxy_pass {{$ERROR_PAGE_404}};
        }
{{end}}

{{$ERROR_PAGE_500 := getenv "ERROR_PAGE_500"}}
# ERROR_PAGE_500 = {{$ERROR_PAGE_500}}
{{if $ERROR_PAGE_500}}
        error_page 500 /error_page_500;
        location = /error_page_500 {
          proxy_set_header X-Orignal-Request-Uri $original_request_uri;
          proxy_set_header X-Orignal-Request-ID $original_request_id;
          proxy_pass {{$ERROR_PAGE_500}};
        }
{{end}}

{{$ERROR_PAGE_503 := getenv "ERROR_PAGE_503"}}
# ERROR_PAGE_503 = {{$ERROR_PAGE_503}}
{{if $ERROR_PAGE_503}}
        error_page 503 /error_page_503;
        location = /error_page_503 {
          proxy_set_header X-Orignal-Request-Uri $original_request_uri;
          proxy_set_header X-Orignal-Request-ID $original_request_id;
          proxy_pass {{$ERROR_PAGE_503}};
        }
{{end}}

        #Load Balancer Status
        location /lb-status {
          access_log off;
          return 200;
        }
        location /lbstatus {
          access_log off;
          return 200;
        }

      	#missing favicon
      	location @missing_favicon {
      	  access_log off;
      	  return 204;
      	}
      	location /favicon.ico {
      	  access_log off;
      	  try_files $uri @missing_favicon;
      	}

    	#pagespeed
        {{if (getenv "PAGESPEED") }}
        include /etc/nginx/pagespeed.conf;
        {{end}}

{{range $serviceJson := getvs "/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{$endpointPath := printf "/endpoints/default/%s" $service.metadata.name}}
  {{$endpoint := json (getv $endpointPath)}}
  {{if $endpoint.subsets}}
  {{if (index $endpoint.subsets 0).addresses}}
  {{$defaultPort := index $service.spec.ports 0}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .http}}
    {{range .http}}
      {{if eq .server "default"}}
      {{$port := or .port $defaultPort.port}}
      #{{$service.metadata.name}}

      {{range .locations}}
      location {{.}} {
        proxy_pass http://{{$service.metadata.name}}_{{$port}};
      }
      {{end}}

      {{range .paths}}
      location {{.path}} {
        {{range .directives}}
        {{.}}
        {{end}}
        {{if not .no_proxy}}
        proxy_pass http://{{$service.metadata.name}}_{{$port}};
        {{end}}
      }

      {{end}}

      {{end}}
    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
  {{end}}
  {{end}}
{{end}}

    }
}

stream{

{{range $serviceJson := getvs "/specs/default/*"}}
  {{$service := json $serviceJson}}
  {{if $service.metadata.annotations}}
    {{$annotation := (index $service.metadata.annotations (or (getenv "ANNOTATION") "nginx"))}}
    {{if $annotation}}
    {{range jsonArray $annotation}}
    {{if .stream}}
    {{range .stream}}

    #{{$service.metadata.name}}
    server {
        listen {{.listen}};
        proxy_pass {{$service.spec.clusterIP}}:{{or .port .listen}};
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
    }

    {{end}}
    {{end}}
    {{end}}
  {{end}}
  {{end}}
{{end}}

}
