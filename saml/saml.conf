#Configure lua-resty-session
set $session_check_ssi off;
set $session_cipher none;
set $session_storage redis;
set $session_redis_prefix        sessions;
set $session_redis_socket        unix:/tmp/redis.sock;
set $session_redis_host          127.0.0.1;
set $session_redis_port          6379;
set $session_redis_uselocking    on;
set $session_redis_spinlockwait  10000;
set $session_redis_maxlockwait   30;
set $session_redis_pool_timeout  45;
set $session_redis_pool_size     10;
set $session_cookie_lifetime     7200;

#POST by IdP with AuthResponse
location /saml/acs {
  access_by_lua_block {
    require("saml").acs()
  }
}

#destroy session
location /saml/logout {
  access_by_lua_block {
    require("saml").logout()
  }
}

#check access on all locations
access_by_lua_block {
  require("saml").checkAccess()
}

#dump session
location /saml/session {
    default_type 'text/plain';
    access_by_lua_block {
      return
    }

    content_by_lua_block {
      local secret = os.getenv("SESSION_SECRET") or "secret123"
      local inspect = require("inspect")
      ngx.say("*** HEADERS ***")
      ngx.say(ngx.req.raw_header())

      ngx.say("*** SESSION DATA ***")
      local session = require "resty.session".open{ secret = secret }

      if session.data then
        for key, val in pairs(session.data) do
          ngx.say(key, ": ", inspect(val))
        end
      end

      -- ngx.say("*** SESSION DUMP ***")
      -- ngx.say(inspect(session))
    }
}

location /checkSession {
    default_type 'text/plain';
    access_log off;
    access_by_lua_block {
      local secret = os.getenv("SESSION_SECRET") or "secret123"
      local session = require "resty.session".open{ secret = secret }
      if session.data.nameID then
        ngx.exit(200)
      end
      ngx.exit(403)
    }
}
